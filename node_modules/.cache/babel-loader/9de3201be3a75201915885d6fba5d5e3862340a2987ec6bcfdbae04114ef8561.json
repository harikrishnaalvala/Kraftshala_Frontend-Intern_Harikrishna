{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harir\\\\Downloads\\\\Kraftshala_Frontend Intern_Harikrishna\\\\Kraftshala_Frontend Intern_Harikrishna\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport WeatherCard from './components/WeatherCard';\nimport { fetchWeather } from './api/weatherAPI';\nimport { useDarkMode } from './hooks/useDarkMode';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useDarkMode();\n  const [currentLocation, setCurrentLocation] = useState(''); // Track the current location\n\n  useEffect(() => {\n    const fetchCurrentLocationWeather = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          try {\n            const data = await fetchWeather(null, position.coords.latitude, position.coords.longitude);\n            setWeather(data);\n            setCurrentLocation(data.name); // Update current location\n          } catch (err) {\n            setError('Could not fetch weather data for your location. Please try again.');\n          }\n        });\n      } else {\n        setError('Geolocation is not supported by this browser.');\n      }\n    };\n    fetchCurrentLocationWeather();\n  }, []);\n  const handleSearch = async location => {\n    try {\n      const data = await fetchWeather(location);\n      setWeather(data);\n      setError('');\n      setCurrentLocation(data.name); // Update current location with searched location\n    } catch (err) {\n      setError('Could not fetch weather data. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark' : 'light'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggsearch\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-button btn\",\n        onClick: () => setIsDarkMode(!isDarkMode),\n        children: [isDarkMode ? 'Light' : 'Dark', \" Mode\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"mx-2\",\n          style: {\n            fontSize: '20px'\n          },\n          icon: isDarkMode ? faToggleOff : faToggleOn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), weather && /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weather: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ubVFft8uSvQA+KT2WRw1Bu+FoGw=\", false, function () {\n  return [useDarkMode];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","WeatherCard","fetchWeather","useDarkMode","FontAwesomeIcon","faToggleOn","faToggleOff","jsxDEV","_jsxDEV","App","_s","weather","setWeather","error","setError","isDarkMode","setIsDarkMode","currentLocation","setCurrentLocation","fetchCurrentLocationWeather","navigator","geolocation","getCurrentPosition","position","data","coords","latitude","longitude","name","err","handleSearch","location","className","children","onClick","style","fontSize","icon","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["C:/Users/harir/Downloads/Kraftshala_Frontend Intern_Harikrishna/Kraftshala_Frontend Intern_Harikrishna/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport WeatherCard from './components/WeatherCard';\nimport { fetchWeather } from './api/weatherAPI';\nimport { useDarkMode } from './hooks/useDarkMode';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport './styles/App.css';\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useDarkMode();\n  const [currentLocation, setCurrentLocation] = useState(''); // Track the current location\n\n  useEffect(() => {\n    const fetchCurrentLocationWeather = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async (position) => {\n          try {\n            const data = await fetchWeather(null, position.coords.latitude, position.coords.longitude);\n            setWeather(data);\n            setCurrentLocation(data.name); // Update current location\n          } catch (err) {\n            setError('Could not fetch weather data for your location. Please try again.');\n          }\n        });\n      } else {\n        setError('Geolocation is not supported by this browser.');\n      }\n    };\n\n    fetchCurrentLocationWeather();\n  }, []);\n\n  const handleSearch = async (location) => {\n    try {\n      const data = await fetchWeather(location);\n      setWeather(data);\n      setError('');\n      setCurrentLocation(data.name); // Update current location with searched location\n    } catch (err) {\n      setError('Could not fetch weather data. Please try again.');\n    }\n  };\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark' : 'light'}`}>\n      <div className='toggsearch'>\n      <button className=\"toggle-button btn\" onClick={() => setIsDarkMode(!isDarkMode)}>\n         {isDarkMode ? 'Light' : 'Dark'} Mode\n        <FontAwesomeIcon className='mx-2' style={{fontSize:'20px'}} icon={isDarkMode ? faToggleOff : faToggleOn} />\n      </button>\n      <SearchBar onSearch={handleSearch} />\n      </div>\n      \n\n      {error && <p className=\"error text-danger\">{error}</p>}\n      {weather && <WeatherCard weather={weather} />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}