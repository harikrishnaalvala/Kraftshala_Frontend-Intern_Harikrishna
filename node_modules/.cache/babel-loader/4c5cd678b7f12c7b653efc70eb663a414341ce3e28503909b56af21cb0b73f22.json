{"ast":null,"code":"// src/api/weatherAPI.js\nimport axios from'axios';import{BASE_URL,API_KEY}from'../config';export const fetchWeather=async(location,lat,lon)=>{try{let response;if(location){response=await axios.get(\"\".concat(BASE_URL,\"weather?q=\").concat(location,\"&appid=\").concat(API_KEY,\"&units=metric\"));}else{response=await axios.get(\"\".concat(BASE_URL,\"weather?lat=\").concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(API_KEY,\"&units=metric\"));}return response.data;}catch(error){throw new Error('Unable to fetch weather data');}};","map":{"version":3,"names":["axios","BASE_URL","API_KEY","fetchWeather","location","lat","lon","response","get","concat","data","error","Error"],"sources":["C:/Users/harir/Downloads/Kraftshala_Frontend Intern_Harikrishna/Kraftshala_Frontend Intern_Harikrishna/src/api/weatherAPI.js"],"sourcesContent":["// src/api/weatherAPI.js\r\nimport axios from 'axios';\r\nimport { BASE_URL, API_KEY } from '../config';\r\n\r\nexport const fetchWeather = async (location, lat, lon) => {\r\n  try {\r\n    let response;\r\n    if (location) {\r\n      response = await axios.get(`${BASE_URL}weather?q=${location}&appid=${API_KEY}&units=metric`);\r\n    } else {\r\n      response = await axios.get(`${BASE_URL}weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Unable to fetch weather data');\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,OAAO,KAAQ,WAAW,CAE7C,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,GAAG,CAAEC,GAAG,GAAK,CACxD,GAAI,CACF,GAAI,CAAAC,QAAQ,CACZ,GAAIH,QAAQ,CAAE,CACZG,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,GAAG,IAAAC,MAAA,CAAIR,QAAQ,eAAAQ,MAAA,CAAaL,QAAQ,YAAAK,MAAA,CAAUP,OAAO,iBAAe,CAAC,CAC9F,CAAC,IAAM,CACLK,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,GAAG,IAAAC,MAAA,CAAIR,QAAQ,iBAAAQ,MAAA,CAAeJ,GAAG,UAAAI,MAAA,CAAQH,GAAG,YAAAG,MAAA,CAAUP,OAAO,iBAAe,CAAC,CACtG,CACA,MAAO,CAAAK,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}